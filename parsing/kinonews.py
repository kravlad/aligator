import json
import requests
from datetime import datetime, timedelta
from bs4 import BeautifulSoup

# import tools.mongodb as db
import configs.config as cfg
from defs import send_telegram, bm, making, sending
# import defs.common as common



async def parsing_kinonews(nothing):
    source = 'kinonews'
    bookmarks = await bm(src=source)
    last_id = bookmarks[source]
    website = cfg.urls[source]['website']

    for k in range(2):
        r = requests.get(website + cfg.urls[source]['url'])
        if r.status_code != 502:
            break
        await asyncio.sleep(3)
    
    soup = BeautifulSoup(r.content, 'html.parser')

    #–ø–∞—Ä—Å–∏–º –Ω–æ–≤–æ—Å—Ç–∏
    div_container = soup.find_all('div', class_= 'anons-title-new')

    i = 0
    data = {source: {}}
    for item in div_container:
        link = website + item.next_element.next_element.attrs['href']
        item_id = int(link[29:-1])
        if last_id != item_id:
            data[source][item_id] = {
                        'id': item_id,
                        'publish': True,
                        'link': link,
                        'html_text': item.text
            }
            i += 1
        else:
            break

    if i > 0:
        last_id = list(data[source].keys())[0]
        await bm(src=source, data={source: last_id})
    
        msgs = await making(data, link='{}.ru', header=False)
        await sending(msgs)
















async def getkino():
    head = 'kinonews'
    website = cfg.urls[head]['website']
    with open(f'files/{head}.json', 'r') as f:
        bm = json.load(f)
        lId = bm[head]

    # –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏—è —Å kino.ru
    url = website + cfg.urls[head]['url']
    r = requests.get(url)
    soup = BeautifulSoup(r.content, 'html.parser')

    #–ø–∞—Ä—Å–∏–º –Ω–æ–≤–æ—Å—Ç–∏
    div_container = soup.find_all('div', class_= 'anons-title-new')

    i = 0
    data = {}
    for item in div_container:
        link = website + item.next_element.next_element.attrs['href']
        newid = link[29:-1]
        if lId != newid:
            data[i] = {
                        'id': newid,
                        'link': link,
                        'text': item.text
            }
            i += 1
        else:
            break

    if i > 0:
        with open(f'files/{head}.json', 'w+') as f:
            json.dump({head: int(data[0]['id'])}, f)

        # try:
        #     doc = {'newid': data[0]['id'], 'date': datetime.now()}
        #     db.upd_doc('bookmarks', {'title': head},
        #         doc, False)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º id –≤ –±–¥
        # except:
        #     pass
    return(head, data)


async def msgkino():
    head, olddata = await getkino()
    if not len(olddata):
        return
    
    # data = await common.sort_dict(olddata, 'key', '', True)
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–æ–Ω–µ—Ü)
    oldmsg = '<b>–ù–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ –∫–∏–Ω–æ:</b>\n\n'
    newmsg = ''
    endmsg = '\n–ò—Å—Ç–æ—á–Ω–∏–∫: kinonews.ru' + \
        '\n\n#<b>–∫–∏–Ω–æ</b> #kinonews #—Å–≤–æ–¥–∫–∞ #–Ω–æ–≤–æ—Å—Ç–∏' + cfg.bot_msg_tail
    lenmsg = 110  # –∫–æ–ª-–≤–æ —Å–∏–≤–æ–ª–æ–≤ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    msgdata = {}

    # –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ—Ç—è–º–∏ –∏–∑ –±–¥
    i = 0
    j = 4 # –Ω–∞—á–∏–Ω–∞–µ–º —Å—á–µ—Ç entities
    for item in data:
        msgitem = 'üé¨' + '<b>' + \
            str(data[item]['text'])[:2].replace("<", "&lt;") + '</b>' + \
            str(data[item]['text'])[2:].replace("<", "&lt;") + \
            ' <a href="' + data[item]['link'] + '">—á–∏—Ç–∞—Ç—å</a>\n'
        newmsg = oldmsg + msgitem  # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –∫ —É–∂–µ –∏–º–µ—é—â–µ–º—É—Å—è —Å–æ–æ–±—â–µ–Ω–∏—é
        # –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ —Ä–∞–∑–º–µ—Ç–∫–∏
        lenitem = len(str(data[item]['text'])) + 8
        lenmsg = lenmsg + lenitem
        if lenmsg >= cfg.tg_limits['msg_lim'] or j > cfg.tg_limits['entities']:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–∏–≤—ã—à–∞–µ—Ç –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–º–∏—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –∏–ª–∏ –∫–æ–ª-–≤–æ entities 100
            # –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –∏ –æ–±–Ω—É–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
            msgdata[i] = oldmsg
            oldmsg = msgitem
            lenmsg = lenitem
            i += 1
            j = 4 # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º entities
        else:
            oldmsg = newmsg
            j += 2

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∫–æ–Ω—Ü–æ–≤–∫—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ msgdata
    msg = oldmsg + endmsg
    msgdata[i] = msg
    return msgdata
    

if __name__ == "__main__":
    # test = msgkino()
    # # i = 0
    # # while i < (len(test)):
    # #     print(test[i])
    # #     i += 1
    
    import asyncio
    test = asyncio.run(msgkino())

    print(test)
